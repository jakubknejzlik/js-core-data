// Generated by CoffeeScript 1.10.0
(function() {
  var AttributeDescription, AttributeType, CoreData, EntityDescription, ManagedObject, ManagedObjectContext, ManagedObjectModel, PersistentStoreCoordinator, Pool, Predicate, Q, RelationshipDescription, async, url;

  PersistentStoreCoordinator = require('./lib/PersistentStoreCoordinator');

  ManagedObjectModel = require('./lib/ManagedObjectModel');

  ManagedObjectContext = require('./lib/ManagedObjectContext');

  ManagedObject = require('./lib/ManagedObject');

  Predicate = require('./lib/FetchClasses/Predicate');

  EntityDescription = require('./lib/Descriptors/EntityDescription');

  AttributeDescription = require('./lib/Descriptors/AttributeDescription');

  AttributeType = require('./lib/Descriptors/AttributeType');

  RelationshipDescription = require('./lib/Descriptors/RelationshipDescription');

  Pool = require('generic-pool');

  url = require('url');

  async = require('async');

  Q = require('q');

  CoreData = (function() {
    CoreData.registerType = function(type) {
      return AttributeDescription.registerType(type);
    };

    function CoreData(storeURL, options1) {
      this.storeURL = storeURL;
      this.options = options1 != null ? options1 : {};
      this.modelVersion = 'default';
      if (this.options.logging === void 0 || (this.options.logging && typeof this.options.logging !== 'function')) {
        this.options.logging = console.log;
      }
      this.models = {};
      this.model = this.models[this.modelVersion] = new ManagedObjectModel(this.options.modelFile, this.options.modelClasses, this.modelVersion);
    }

    CoreData.prototype.syncSchema = function(options, callback) {
      var deferred;
      deferred = Q.defer();
      if (typeof options === 'function') {
        callback = options;
        options = void 0;
      }
      options = options || {};
      async.forEach(this._persistentStoreCoordinator().persistentStores, function(store, cb) {
        return store.syncSchema(options, cb);
      }, function(err) {
        if (err) {
          return deferred.reject(err);
        } else {
          return deferred.resolve();
        }
      });
      return deferred.promise.nodeify(callback);
    };

    CoreData.prototype.setModelVersion = function(version) {
      if (!this.models[version]) {
        throw new Error('unknown model version ' + version);
      }
      this.modelVersion = version;
      this.model = this.models[this.modelVersion];
      return this.persistentStoreCoordinator = null;
    };

    CoreData.prototype.createModel = function(modelVersion) {
      this.models[modelVersion] = new ManagedObjectModel(null, null, modelVersion);
      return this.models[modelVersion];
    };

    CoreData.prototype.defineEntity = function(entityName, attributes, options) {
      if (options == null) {
        options = {};
      }
      return this.model.defineEntity(entityName, attributes, options);
    };

    CoreData.prototype.defineRelationship = function(entity, destinationEntity, name, options) {
      if (options == null) {
        options = {};
      }
      return this.model.defineRelationship(entity, destinationEntity, name, options);
    };

    CoreData.prototype.defineRelationshipToMany = function(entity, destinationEntity, name, inverse) {
      return this.model.defineRelationshipToMany(entity, destinationEntity, name, inverse);
    };

    CoreData.prototype.defineRelationshipToOne = function(entity, destinationEntity, name, inverse) {
      return this.model.defineRelationshipToOne(entity, destinationEntity, name, inverse);
    };

    CoreData.prototype.defineRelationshipOneToMany = function(entity, destinationEntity, name, inverse) {
      return this.model.defineRelationshipOneToMany(entity, destinationEntity, name, inverse);
    };

    CoreData.prototype.defineRelationshipManyToOne = function(entity, destinationEntity, name, inverse) {
      return this.model.defineRelationshipManyToOne(entity, destinationEntity, name, inverse);
    };

    CoreData.prototype.defineRelationshipManyToMany = function(entity, destinationEntity, name, inverse) {
      return this.model.defineRelationshipManyToMany(entity, destinationEntity, name, inverse);
    };

    CoreData.prototype.createContext = function() {
      return new ManagedObjectContext(this._persistentStoreCoordinator());
    };

    CoreData.prototype._persistentStoreCoordinator = function() {
      if (!this.persistentStoreCoordinator) {
        this.persistentStoreCoordinator = new PersistentStoreCoordinator(this.model, this.options);
        this.persistentStoreCoordinator.addStore(this.storeURL);
      }
      return this.persistentStoreCoordinator;
    };

    CoreData.prototype.middleware = function() {
      return (function(_this) {
        return function(req, res, next) {
          var context;
          context = _this.createContext();
          req.context = context;
          res.once('finish', function() {
            return context.destroy();
          });
          return next();
        };
      })(this);
    };

    return CoreData;

  })();

  CoreData.PersistentStoreCoordinator = PersistentStoreCoordinator;

  CoreData.ManagedObjectModel = ManagedObjectModel;

  CoreData.ManagedObjectContext = ManagedObjectContext;

  CoreData.ManagedObject = ManagedObject;

  CoreData.Predicate = Predicate;

  CoreData.AttributeType = AttributeType;

  CoreData.debug = process.env.NOD_ENV !== 'production';

  module.exports = CoreData;

}).call(this);

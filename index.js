// Generated by CoffeeScript 1.9.3
(function() {
  var ManagedObject, ManagedObjectContext, ManagedObjectModel, PersistentStoreCoordinator, Pool, Predicate;

  PersistentStoreCoordinator = require('./lib/PersistentStoreCoordinator');

  ManagedObjectModel = require('./lib/ManagedObjectModel');

  ManagedObjectContext = require('./lib/ManagedObjectContext');

  ManagedObject = require('./lib/ManagedObject');

  Predicate = require('./lib/FetchClasses/Predicate');

  Pool = require('generic-pool');

  module.exports.PersistentStoreCoordinator = PersistentStoreCoordinator;

  module.exports.ManagedObjectModel = ManagedObjectModel;

  module.exports.ManagedObjectContext = ManagedObjectContext;

  module.exports.ManagedObject = ManagedObject;

  module.exports.Predicate = Predicate;

  module.exports.debug = false;

  module.exports.createContextPool = function(modelFile, storeURL, options, callback) {
    var createAndSendPool, objectModel, persistentStoreCoordinator;
    createAndSendPool = function() {
      var pool;
      options = options || {};
      options.name = 'model:' + modelFile + ';store:' + storeURL;
      options.max = options.max || 10;
      options.idleTimeoutMillis = options.idleTimeoutMillis || 1000;
      options.create = function(callback) {
        callback(null, new ManagedObjectContext(persistentStoreCoordinator));
      };
      options.destroy = function(context) {
        context.destroy();
      };
      pool = new Pool.Pool(options);
      pool.runBlockWithCallback = (function(callback, fn) {
        return pool.acquire(function(err, context) {
          if (err) {
            return callback(err);
          }
          return fn(context, function() {
            pool.release(context);
            return callback.apply(this, arguments);
          });
        });
      });
      callback(null, pool);
    };
    options = options || {};
    objectModel = new ManagedObjectModel(modelFile, options.modelClasses);
    persistentStoreCoordinator = new PersistentStoreCoordinator(objectModel);
    if (storeURL.indexOf('mysql:') === 0) {
      persistentStoreCoordinator.addStore(PersistentStoreCoordinator.STORE_TYPE_MYSQL, storeURL, function(err) {
        if (err) {
          return callback(err);
        }
        return createAndSendPool();
      });
    } else {
      callback(new Error('unknown store for url' + storeURL));
    }
  };

  module.exports.ExpressJS = {
    middleware: function(contextPool) {
      return function(req, res, next) {
        contextPool.acquire(function(err, context) {
          if (err) {
            return next(err);
          }
          req.context = context;
          res.on('finish', function() {
            contextPool.release(context);
          });
          next();
        });
      };
    },
    errorReleaseHandler: function(contextPool) {
      return function(err, req, res, next) {
        if (req.context) {
          contextPool.release(req.context);
        }
        next(err);
      };
    }
  };

}).call(this);

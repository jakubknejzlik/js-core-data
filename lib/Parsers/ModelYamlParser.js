// Generated by CoffeeScript 1.6.3
(function() {
  var AttributeDescription, EntityDescription, ManagedObjectModel, ModelYamlParser, RelationshipDescription, fs, yaml, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  yaml = require('js-yaml');

  fs = require('fs');

  EntityDescription = require('./../Descriptors/EntityDescription');

  AttributeDescription = require('./../Descriptors/AttributeDescription');

  RelationshipDescription = require('./../Descriptors/RelationshipDescription');

  ManagedObjectModel = require('./../ManagedObjectModel');

  ModelYamlParser = (function(_super) {
    __extends(ModelYamlParser, _super);

    function ModelYamlParser() {
      _ref = ModelYamlParser.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ModelYamlParser.objectModelFromYamlFile = function(file) {
      var objectModel;
      objectModel = new ManagedObjectModel();
      this.fillModelFromYamlFile(objectModel, file);
      return objectModel;
    };

    ModelYamlParser.objectModelFromYaml = function(yamlSource) {
      var objectModel;
      objectModel = new ManagedObjectModel();
      this.fillModelFromYaml(objectModel, yamlSource);
      return objectModel;
    };

    ModelYamlParser.fillModelFromYamlFile = function(objectModel, file) {
      return this.fillModelFromYaml(objectModel, fs.readFileSync(file, 'utf8'));
    };

    ModelYamlParser.fillModelFromYaml = function(objectModel, yamlSource) {
      var attr, attributeInfo, attributeKey, e, entities, entitiesArray, entity, entityName, info, relationship, relationshipInfo, relationshipName, _entities, _i, _len, _ref1, _ref2, _results;
      try {
        entities = {};
        entitiesArray = [];
        _entities = yaml.safeLoad(yamlSource);
        for (entityName in _entities) {
          info = _entities[entityName];
          entity = new EntityDescription(entityName);
          if (info["class"]) {
            entity.objectClassName = info["class"];
          }
          entities[entityName] = entity;
          entitiesArray.push(entity);
          _ref1 = info.columns;
          for (attributeKey in _ref1) {
            attributeInfo = _ref1[attributeKey];
            if (!(attributeInfo instanceof Object)) {
              attributeInfo = {
                type: attributeInfo
              };
            }
            attr = new AttributeDescription(attributeInfo.type, attributeInfo, attributeKey, null);
            if (attributeInfo.options) {
              attr.options = attributeInfo.options;
            }
            entity.addAttribute(attr);
          }
        }
        for (entityName in _entities) {
          info = _entities[entityName];
          _ref2 = info.relationships || info.relations;
          for (relationshipName in _ref2) {
            relationshipInfo = _ref2[relationshipName];
            relationship = new RelationshipDescription(relationshipName, entities[relationshipInfo.entity], relationshipInfo.toMany, relationshipInfo.inverse);
            if (relationshipInfo.delete_rule || relationshipInfo.deleteRule) {
              relationship.deleteRule = relationshipInfo.delete_rule || relationshipInfo.deleteRule;
            }
            entities[entityName].addRelationship(relationship);
          }
        }
        _results = [];
        for (_i = 0, _len = entitiesArray.length; _i < _len; _i++) {
          entity = entitiesArray[_i];
          _results.push(objectModel.addEntity(entity));
        }
        return _results;
      } catch (_error) {
        e = _error;
        throw new Error('Could not parse yaml, reason: ' + e.message);
      }
    };

    return ModelYamlParser;

  })(Object);

  module.exports = ModelYamlParser;

}).call(this);

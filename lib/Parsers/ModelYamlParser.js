// Generated by CoffeeScript 1.10.0
(function() {
  var AttributeDescription, EntityDescription, ManagedObjectModel, ModelYamlParser, RelationshipDescription, fs, yaml,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  yaml = require('js-yaml');

  fs = require('fs');

  EntityDescription = require('./../Descriptors/EntityDescription');

  AttributeDescription = require('./../Descriptors/AttributeDescription');

  RelationshipDescription = require('./../Descriptors/RelationshipDescription');

  ManagedObjectModel = require('./../ManagedObjectModel');

  ModelYamlParser = (function(superClass) {
    extend(ModelYamlParser, superClass);

    function ModelYamlParser() {
      return ModelYamlParser.__super__.constructor.apply(this, arguments);
    }

    ModelYamlParser.objectModelFromYamlFile = function(file) {
      var objectModel;
      objectModel = new ManagedObjectModel();
      this.fillModelFromYamlFile(objectModel, file);
      return objectModel;
    };

    ModelYamlParser.objectModelFromYaml = function(yamlSource) {
      var objectModel;
      objectModel = new ManagedObjectModel();
      this.fillModelFromYaml(objectModel, yamlSource);
      return objectModel;
    };

    ModelYamlParser.fillModelFromYamlFile = function(objectModel, file) {
      return this.fillModelFromYaml(objectModel, fs.readFileSync(file, 'utf8'));
    };

    ModelYamlParser.fillModelFromYaml = function(objectModel, yamlSource) {
      var _entities, e, entities, entitiesArray, entity, entityName, error, i, info, len, ref, relationship, relationshipInfo, relationshipName, results;
      try {
        entities = {};
        entitiesArray = [];
        _entities = yaml.safeLoad(yamlSource);
        for (entityName in _entities) {
          info = _entities[entityName];
          entity = new EntityDescription(entityName, info);
          entities[entityName] = entity;
          entitiesArray.push(entity);
        }
        for (entityName in _entities) {
          info = _entities[entityName];
          ref = info.relationships || info.relations;
          for (relationshipName in ref) {
            relationshipInfo = ref[relationshipName];
            relationship = new RelationshipDescription(relationshipName, entities[relationshipInfo.entity], relationshipInfo.toMany, relationshipInfo.inverse);
            if (relationshipInfo.delete_rule || relationshipInfo.deleteRule) {
              relationship.deleteRule = relationshipInfo.delete_rule || relationshipInfo.deleteRule;
            }
            entities[entityName].addRelationship(relationship);
          }
        }
        results = [];
        for (i = 0, len = entitiesArray.length; i < len; i++) {
          entity = entitiesArray[i];
          results.push(objectModel.addEntity(entity));
        }
        return results;
      } catch (error) {
        e = error;
        throw new Error('Could not parse yaml, reason: ' + e.message);
      }
    };

    return ModelYamlParser;

  })(Object);

  module.exports = ModelYamlParser;

}).call(this);

// Generated by CoffeeScript 1.10.0
(function() {
  var AttributeDescription, EntityDescription, ManagedObjectModel, ModelYamlParser, RelationshipDescription, fs, yaml,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  yaml = require('js-yaml');

  fs = require('fs');

  EntityDescription = require('./../Descriptors/EntityDescription');

  AttributeDescription = require('./../Descriptors/AttributeDescription');

  RelationshipDescription = require('./../Descriptors/RelationshipDescription');

  ManagedObjectModel = require('./../ManagedObjectModel');

  ModelYamlParser = (function(superClass) {
    extend(ModelYamlParser, superClass);

    function ModelYamlParser() {
      return ModelYamlParser.__super__.constructor.apply(this, arguments);
    }

    ModelYamlParser.objectModelFromYaml = function(yamlSource, objectClasses) {
      var objectModel;
      objectModel = new ManagedObjectModel();
      this.fillModelFromYaml(objectModel, yamlSource, objectClasses);
      return objectModel;
    };

    ModelYamlParser.fillModelFromYaml = function(objectModel, yamlSource, objectClasses) {
      var _entities, e, entities, entitiesArray, entity, entityClass, entityName, error, info, relationship, relationshipInfo, relationshipName, results;
      if (objectClasses == null) {
        objectClasses = {};
      }
      try {
        entities = {};
        entitiesArray = [];
        _entities = yaml.safeLoad(yamlSource);
        for (entityName in _entities) {
          info = _entities[entityName];
          entityClass = objectClasses[entityName || info["class"]];
          if (info["class"] && !entityClass) {
            throw new Error('Could not find objectClass ' + info["class"]);
          }
          entity = objectModel.defineEntity(entityName, info.columns, {
            "class": entityClass
          });
          entities[entityName] = entity;
          entitiesArray.push(entity);
        }
        results = [];
        for (entityName in _entities) {
          info = _entities[entityName];
          results.push((function() {
            var ref, results1;
            ref = info.relationships || info.relations;
            results1 = [];
            for (relationshipName in ref) {
              relationshipInfo = ref[relationshipName];
              relationship = new RelationshipDescription(relationshipName, entities[relationshipInfo.entity], relationshipInfo.toMany, relationshipInfo.inverse);
              if (relationshipInfo.delete_rule || relationshipInfo.deleteRule) {
                relationship.deleteRule = relationshipInfo.delete_rule || relationshipInfo.deleteRule;
              }
              results1.push(entities[entityName].addRelationship(relationship));
            }
            return results1;
          })());
        }
        return results;
      } catch (error) {
        e = error;
        throw new Error('Could not parse yaml, reason: ' + e.message);
      }
    };

    return ModelYamlParser;

  })(Object);

  module.exports = ModelYamlParser;

}).call(this);

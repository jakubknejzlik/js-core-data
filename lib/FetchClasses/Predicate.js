// Generated by CoffeeScript 1.10.0
(function() {
  var DATE_FORMAT, ManagedObject, ManagedObjectID, Predicate, moment, nanRegExp, numberRegExp, operators, util,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  util = require('util');

  ManagedObject = require('./../ManagedObject');

  ManagedObjectID = require('./../ManagedObjectID');

  moment = require('moment');

  DATE_FORMAT = 'YYYY-MM-DD HH:mm:ss';

  numberRegExp = /\!([0-9\.]+)\!/g;

  nanRegExp = /\!NaN\!/g;

  operators = {
    '>=': '>=',
    '<=': '<=',
    '>': '>',
    '<': '<',
    '!': '<>',
    '?': 'LIKE'
  };

  Predicate = (function(superClass) {
    extend(Predicate, superClass);

    function Predicate() {
      var format1, variables;
      format1 = arguments[0], variables = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      this.format = format1;
      this.variables = variables;
    }

    Predicate.prototype.isObjectIDPredicate = function() {
      return this.format instanceof ManagedObjectID;
    };

    Predicate.prototype.objectID = function() {
      return this.format;
    };

    Predicate.prototype.parseObjectCondition = function(object, join) {
      var _operator, key, operator, predicates, signature, string, value;
      if (join == null) {
        join = 'AND';
      }
      predicates = [];
      for (key in object) {
        value = object[key];
        operator = '=';
        for (signature in operators) {
          _operator = operators[signature];
          if (key.indexOf(signature) !== -1) {
            operator = _operator;
            key = key.replace(signature, '');
            break;
          }
        }
        if (value === null) {
          if (operator === '<>') {
            predicates.push(new Predicate(key + ' IS NOT NULL'));
          } else {
            predicates.push(new Predicate(key + ' IS NULL'));
          }
        } else if (key === '$or') {
          predicates.push(this.parseObjectCondition(value, 'OR'));
        } else if (key === '$and') {
          predicates.push(this.parseObjectCondition(value, 'AND'));
        } else if (Array.isArray(value)) {
          predicates.push(new Predicate(key + ' IN %a', value));
        } else if (typeof value === 'number') {
          predicates.push(new Predicate(key + ' ' + operator + ' %d', value));
        } else if (typeof value === 'string') {
          if (operator === 'LIKE') {
            predicates.push(new Predicate(key + ' ' + operator + ' %s', value.replace(/\*/g, '%').replace(/\?/g, '_')));
          } else {
            predicates.push(new Predicate(key + ' ' + operator + ' %s', value));
          }
        }
      }
      predicates = predicates.filter(function(x) {
        return x;
      });
      if (predicates.length === 0) {
        return null;
      }
      string = predicates.map(function(x) {
        return x.toString();
      }).join(' ' + join + ' ');
      return '(' + string + ')';
    };

    Predicate.prototype.toString = function() {
      var args, format, i, len, ref, string, variable;
      if (this.format instanceof ManagedObjectID) {
        return '_id = ' + this.format.recordId();
      } else {
        if (typeof this.format === 'object') {
          return this.parseObjectCondition(this.format) || 'TRUE';
        }
        format = this.format.replace(/[\s]*(!?=)[\s]*%@/g, '_id $1 %d').replace(/%s/g, '\'%s\'').replace(/%a/g, '%s').replace(/%d/g, '!%d!');
        args = [format];
        ref = this.variables;
        for (i = 0, len = ref.length; i < len; i++) {
          variable = ref[i];
          if (variable === void 0 || variable === null) {
            variable = null;
          } else if (util.isArray(variable)) {
            variable = '(' + variable.map(function(x) {
              if (typeof x === 'string') {
                return '\'' + x.replace(/'/g, '\'') + '\'';
              }
              return x;
            }).join(',') + ')';
          } else if (variable instanceof Date) {
            variable = moment(variable).format(DATE_FORMAT);
          } else if (variable instanceof ManagedObject) {
            variable = variable.objectID.recordId();
          } else if (variable instanceof ManagedObjectID) {
            variable = variable.recordId();
          } else if (variable._isAMomentObject) {
            variable = variable.format(DATE_FORMAT);
          }
          args.push(variable);
        }
        string = util.format.apply(util.format, args);
        string = string.replace(numberRegExp, '$1');
        string = string.replace(nanRegExp, '\'[NaN]\'');
        return string;
      }
    };

    return Predicate;

  })(Object);

  module.exports = Predicate;

}).call(this);

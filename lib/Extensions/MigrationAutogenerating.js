// Generated by CoffeeScript 1.10.0
(function() {
  var ManagedObjectModel, MigrationDescription, diff,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ManagedObjectModel = require('../ManagedObjectModel');

  MigrationDescription = require('../Descriptors/MigrationDescription');

  diff = (function(_this) {
    return function(arr, arr2) {
      return arr.filter(function(x) {
        return indexOf.call(arr2, x) < 0;
      });
    };
  })(this);

  ManagedObjectModel.prototype.autogenerateMigrationFromModel = function(modelFrom, options) {
    var addedAttributes, addedEntities, addedRelationships, attribute, entity, entityName, i, j, k, l, len, len1, len2, len3, len4, len5, len6, m, migration, n, newAttributes, newEntities, newEntity, newRelationships, o, oldAttributes, oldEntities, oldEntity, oldRelationships, relationship, removedAttributes, removedEntities, removedRelationships, sameEntities;
    migration = new MigrationDescription(modelFrom, this);
    oldEntities = Object.keys(modelFrom.entities);
    newEntities = Object.keys(this.entities);
    addedEntities = diff(newEntities, oldEntities);
    removedEntities = diff(oldEntities, newEntities);
    sameEntities = diff(newEntities, addedEntities);
    for (i = 0, len = addedEntities.length; i < len; i++) {
      entity = addedEntities[i];
      migration.addEntity(entity);
    }
    for (j = 0, len1 = removedEntities.length; j < len1; j++) {
      entity = removedEntities[j];
      migration.removeEntity(entity);
    }
    for (k = 0, len2 = sameEntities.length; k < len2; k++) {
      entityName = sameEntities[k];
      newEntity = this.getEntity(entityName);
      oldEntity = modelFrom.getEntity(entityName);
      newAttributes = Object.keys(newEntity.attributesByName());
      oldAttributes = Object.keys(oldEntity.attributesByName());
      addedAttributes = diff(newAttributes, oldAttributes);
      removedAttributes = diff(oldAttributes, newAttributes);
      for (l = 0, len3 = addedAttributes.length; l < len3; l++) {
        attribute = addedAttributes[l];
        migration.addAttribute(entityName, attribute);
      }
      for (m = 0, len4 = removedAttributes.length; m < len4; m++) {
        attribute = removedAttributes[m];
        migration.removeAttribute(entityName, attribute);
      }
      newRelationships = Object.keys(newEntity.relationshipsByName());
      oldRelationships = Object.keys(oldEntity.relationshipsByName());
      addedRelationships = diff(newRelationships, oldRelationships);
      removedRelationships = diff(oldRelationships, newRelationships);
      for (n = 0, len5 = addedRelationships.length; n < len5; n++) {
        relationship = addedRelationships[n];
        migration.addRelationship(entityName, relationship);
      }
      for (o = 0, len6 = removedRelationships.length; o < len6; o++) {
        relationship = removedRelationships[o];
        migration.removeRelationship(entityName, relationship);
      }
    }
    return migration;
  };

}).call(this);

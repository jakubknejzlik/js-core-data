// Generated by CoffeeScript 1.10.0
(function() {
  var AttributeDescription, AttributeType, PropertyDescription, attributeTypes, emailRegexp, floatTransform, floatValidate, moment, urlRegexp, uuid,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PropertyDescription = require('./PropertyDescription');

  AttributeType = require('./AttributeType');

  moment = require('moment');

  uuid = require('uuid');

  attributeTypes = {};

  AttributeDescription = (function(superClass) {
    extend(AttributeDescription, superClass);

    function AttributeDescription(type1, info, name, entity) {
      this.type = type1;
      this.info = info;
      this.persistentType = this.info.persistentType || this.type;
      AttributeDescription.__super__.constructor.call(this, name, entity);
    }

    AttributeDescription.registerType = function(type, aliases) {
      var alias, i, len, results;
      if (aliases == null) {
        aliases = [];
      }
      attributeTypes[type.name] = type;
      results = [];
      for (i = 0, len = aliases.length; i < len; i++) {
        alias = aliases[i];
        results.push(attributeTypes[alias] = type);
      }
      return results;
    };

    AttributeDescription.prototype.getAttributeType = function() {
      if (!attributeTypes[this.type]) {
        throw new Error('unknown attribute type \'' + this.type + '\'');
      }
      return attributeTypes[this.type];
    };

    AttributeDescription.prototype.transform = function(value) {
      if (value === null) {
        return null;
      }
      return this.getAttributeType().transform(value, this);
    };

    AttributeDescription.prototype.decode = function(value) {
      return this.getAttributeType().decode(value, this);
    };

    AttributeDescription.prototype.encode = function(value) {
      if (value === null) {
        return null;
      }
      return this.getAttributeType().encode(value, this);
    };

    AttributeDescription.prototype.defaultValue = function() {
      var ref, value;
      value = ((ref = this.info) != null ? ref["default"] : void 0) || null;
      return this.transform(value);
    };

    AttributeDescription.prototype.validateValue = function(value) {
      if (!this.getAttributeType().validate(value, this)) {
        throw new Error('value \'' + value + '\' (' + (typeof value) + ') is not valid for attribute ' + this.name);
      }
    };

    AttributeDescription.prototype.toString = function() {
      return this.name + '(' + this.type + ')';
    };

    return AttributeDescription;

  })(PropertyDescription);

  module.exports = AttributeDescription;

  urlRegexp = new RegExp('^(ht|f)tp(s?)\:\/\/(([a-zA-Z0-9\-\._]+(\.[a-zA-Z0-9\-\._]+)+)|localhost)(\/?)([a-zA-Z0-9\-\.\?\,\'\/\\\+&amp;%\$#_]*)?([\d\w\.\/\%\+\-\=\&amp;\?\:\\\&quot;\'\,\|\~\;]*)$');

  emailRegexp = new RegExp('^[0-9a-zA-Z]+([0-9a-zA-Z]*[-._+])*[0-9a-zA-Z]+@[0-9a-zA-Z]+([-.][0-9a-zA-Z]+)*([0-9a-zA-Z]*[.])[a-zA-Z]{2,6}$');

  floatTransform = function(value) {
    value = parseFloat(value);
    if (isNaN(value)) {
      value = null;
    }
    return value;
  };

  floatValidate = function(value) {
    if (!isNaN(parseFloat(value)) && isFinite(value)) {
      return true;
    }
  };

  AttributeDescription.registerType((new AttributeType('string', 'string')).validateFn(function(value, attribute) {
    var _re, v;
    if (attribute.info.maxLength && value.toString().length > attribute.info.maxLength) {
      throw new Error('value \'' + value + '\' longer than maxLength(' + attribute.info.maxLength + ') of attribute ' + attribute.name);
    }
    if (attribute.info.minLength && value.toString().length < attribute.info.minLength) {
      throw new Error('value \'' + value + '\' shorter than minLength(' + attribute.info.minLength + ') of attribute ' + attribute.name);
    }
    if (attribute.info.regexp) {
      if (!attribute.info._regexp) {
        v = attribute.info.regexp;
        _re = [];
        if (v[0] === '/') {
          v = v.substring(1);
          _re = v.split('/');
        } else {
          _re.push(v);
        }
        attribute.info._regexp = new RegExp(_re[0], _re[1]);
      }
      if (!attribute.info._regexp.test(value.toString())) {
        throw new Error('value \'' + value + '\' does is not valid for regular expression(' + attribute.info.regexp + ') of attribute ' + attribute.name);
      }
    }
    return true;
  }));

  AttributeDescription.registerType((new AttributeType('url', 'string')).validateFn(function(value, attribute) {
    if (urlRegexp.test(value)) {
      return true;
    }
  }));

  AttributeDescription.registerType((new AttributeType('email', 'string')).validateFn(function(value, attribute) {
    if (emailRegexp.test(value)) {
      return true;
    }
  }));

  AttributeDescription.registerType(new AttributeType('text', 'text'));

  AttributeDescription.registerType(new AttributeType('data', 'data'));

  AttributeDescription.registerType((new AttributeType('decimal', 'decimal')).transformFn(floatTransform).validateFn(floatValidate));

  AttributeDescription.registerType((new AttributeType('float', 'float')).transformFn(floatTransform).validateFn(floatValidate));

  AttributeDescription.registerType((new AttributeType('double', 'double')).transformFn(floatTransform).validateFn(floatValidate));

  AttributeDescription.registerType((new AttributeType('integer', 'integer')).transformFn(function(value) {
    value = parseInt(value, 10);
    if (isNaN(value)) {
      value = null;
    }
    return value;
  }).validateFn(function(value) {
    if (!isNaN(parseInt(value)) && isFinite(value) && parseInt(value, 10) === parseFloat(value)) {
      return true;
    }
  }), ['int']);

  AttributeDescription.registerType((new AttributeType('date', 'date')).transformFn(function(value) {
    if (value === 'now') {
      value = moment();
    }
    if (typeof value === 'string') {
      value = new Date(value);
    }
    return moment(value).toDate();
  }).validateFn(function(value) {
    if (value === 'now') {
      return true;
    }
    if (value instanceof Date || (typeof value === 'string' && moment(new Date(value)).isValid())) {
      return true;
    }
  }));

  AttributeDescription.registerType((new AttributeType('timestamp', 'timestamp')).transformFn(function(value) {
    if (typeof value === 'string') {
      value = new Date(value);
    }
    return moment(value).toDate();
  }).validateFn(function(value) {
    if (value === 'now') {
      return true;
    }
    if (value instanceof Date || (moment(new Date(value)).isValid())) {
      return true;
    }
  }).encodeFn(function(value) {
    return value.getTime();
  }).decodeFn(function(value) {
    return new Date(value);
  }));

  AttributeDescription.registerType((new AttributeType('boolean', 'boolean')).transformFn(function(value) {
    if (typeof value === 'string') {
      value = value.toLowerCase().trim();
    }
    switch (value) {
      case true:
      case 'true':
      case 1:
      case '1':
      case 'on':
      case 'yes':
        return true;
      default:
        return false;
    }
  }).validateFn(function(value) {
    if (typeof value === 'string') {
      value = value.toLowerCase().trim();
    }
    switch (value) {
      case true:
      case false:
      case 'true':
      case 'false':
      case 'on':
      case 'off':
      case '1':
      case '0':
      case 'yes':
      case 'no':
        return true;
    }
  }), ['bool']);

  AttributeDescription.registerType((new AttributeType('transformable', 'text')).transformFn(function(value) {
    if (typeof value === 'string') {
      value = JSON.parse(value);
    }
    return value;
  }).encodeFn(function(value) {
    return JSON.stringify(value);
  }));

  AttributeDescription.registerType((new AttributeType('uuid', 'string')).transformFn(function(value) {
    if (value === 'uuid' || value === 'uuidv4') {
      value = uuid.v4();
    }
    return value;
  }));

}).call(this);

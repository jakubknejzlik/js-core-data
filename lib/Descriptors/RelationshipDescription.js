// Generated by CoffeeScript 1.6.3
(function() {
  var PropertyDescription, RelationshipDescription,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  PropertyDescription = require('./PropertyDescription');

  RelationshipDescription = (function(_super) {
    __extends(RelationshipDescription, _super);

    RelationshipDescription.deleteRules = {
      NO_ACTION: 'no_action',
      NULLIFY: 'nullify',
      CASCADE: 'cascade',
      DENY: 'deny'
    };

    function RelationshipDescription(name, destinationEntity, toMany, inverseRelationshipName, entity) {
      this.destinationEntity = destinationEntity;
      this.toMany = toMany;
      this.inverseRelationshipName = inverseRelationshipName;
      if (!this.destinationEntity) {
        throw new Error('destination entity cannot be null for relationship \'' + name + '\'');
      }
      this.deleteRule = RelationshipDescription.deleteRules.NULLIFY;
      RelationshipDescription.__super__.constructor.call(this, name, entity);
    }

    RelationshipDescription.prototype.inverseRelationship = function() {
      var inv;
      inv = this.destinationEntity.relationshipsByName()[this.inverseRelationshipName];
      if (!inv) {
        throw new Error('could not found inverse relationship \'' + this.inverseRelationshipName + '\' for relationship ' + this.entity.name + '->' + this.name);
      }
      return inv;
    };

    RelationshipDescription.prototype.toString = function() {
      return this.name + '(' + this.entity + ')';
    };

    return RelationshipDescription;

  })(PropertyDescription);

  module.exports = RelationshipDescription;

}).call(this);

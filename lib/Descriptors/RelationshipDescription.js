// Generated by CoffeeScript 1.10.0
(function() {
  var PropertyDescription, RelationshipDescription,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  PropertyDescription = require('./PropertyDescription');

  RelationshipDescription = (function(superClass) {
    extend(RelationshipDescription, superClass);

    RelationshipDescription.deleteRules = {
      NO_ACTION: 'no_action',
      NULLIFY: 'nullify',
      CASCADE: 'cascade',
      DENY: 'deny'
    };

    function RelationshipDescription(name, destinationEntity, toMany, inverseRelationshipName, entity, deleteRule) {
      this.destinationEntity = destinationEntity;
      this.toMany = toMany;
      this.inverseRelationshipName = inverseRelationshipName;
      this.deleteRule = deleteRule != null ? deleteRule : RelationshipDescription.deleteRules.NULLIFY;
      if (!this.destinationEntity) {
        throw new Error('destination entity cannot be null for relationship \'' + name + '\'');
      }
      RelationshipDescription.__super__.constructor.call(this, name, entity);
    }

    RelationshipDescription.prototype.inverseRelationship = function() {
      var inv;
      if (!this.inverseRelationshipName) {
        throw new Error('inverse relationship for ' + this.entity.name + '->' + this.name + ' not defined');
      }
      inv = this.destinationEntity.relationshipsByName()[this.inverseRelationshipName];
      if (!inv) {
        throw new Error('could not found inverse relationship \'' + this.inverseRelationshipName + '\' for relationship ' + this.entity.name + '->' + this.name);
      }
      return inv;
    };

    RelationshipDescription.prototype.toString = function() {
      return this.entity.name + '=>' + this.name;
    };

    RelationshipDescription.prototype.getOnDeleteRule = function() {
      switch (this.deleteRule) {
        case RelationshipDescription.deleteRules.NO_ACTION:
          return 'NO ACTION';
        case RelationshipDescription.deleteRules.CASCADE:
          return 'CASCADE';
        case RelationshipDescription.deleteRules.DENY:
          return 'RESTRICT';
        default:
          return 'SET NULL';
      }
    };

    return RelationshipDescription;

  })(PropertyDescription);

  module.exports = RelationshipDescription;

}).call(this);

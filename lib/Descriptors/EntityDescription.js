// Generated by CoffeeScript 1.10.0
(function() {
  var AttributeDescription, EntityDescription, ManagedObject, RelationshipDescription, path;

  AttributeDescription = require('./AttributeDescription');

  RelationshipDescription = require('./RelationshipDescription');

  ManagedObject = require('./../ManagedObject');

  path = require('path');

  EntityDescription = (function() {
    function EntityDescription(name1, initData) {
      var attr, attributeInfo, attributeKey, i, index, len, ref, ref1;
      this.name = name1;
      this.attributes = [];
      this.relationships = [];
      this.indexes = [];
      this._attributesByName = {};
      this._relationshipsByName = {};
      if (initData) {
        if (typeof initData["class"] === 'string') {
          this.objectClassName = initData["class"];
        } else if (typeof initData["class"] === 'function') {
          this.objectClass = initData["class"];
        }
        ref = initData.columns;
        for (attributeKey in ref) {
          attributeInfo = ref[attributeKey];
          if (!(attributeInfo instanceof Object)) {
            attributeInfo = {
              type: attributeInfo
            };
          }
          attr = new AttributeDescription(attributeInfo.type, attributeInfo, attributeKey, null);
          if (attributeInfo.options) {
            attr.options = attributeInfo.options;
          }
          this.addAttribute(attr);
        }
        if (initData.indexes) {
          ref1 = initData.indexes;
          for (i = 0, len = ref1.length; i < len; i++) {
            index = ref1[i];
            if (typeof index === 'string') {
              index = {
                name: index,
                columns: [index]
              };
            }
            this.addIndex(index.name, index.type, index.columns);
          }
        }
      }
    }

    EntityDescription.prototype.addAttribute = function(attribute) {
      if (attribute instanceof AttributeDescription) {
        attribute.entity = this;
        this.attributes.push(attribute);
        this._attributesByName[attribute.name] = attribute;
      } else {
        throw new Error('attribute ' + attribute + ' is not AttributeDescription');
      }
      return this;
    };

    EntityDescription.prototype.addRelationship = function(relationship) {
      if (relationship instanceof RelationshipDescription) {
        relationship.entity = this;
        this.relationships.push(relationship);
        this._relationshipsByName[relationship.name] = relationship;
      } else {
        throw new Error('relationship ' + relationship + ' is not AttributeDescription');
      }
      return this;
    };

    EntityDescription.prototype.addIndex = function(name, type, columns) {
      if (type == null) {
        type = 'key';
      }
      return this.indexes.push({
        name: name,
        type: type,
        columns: columns
      });
    };

    EntityDescription.prototype.getAttribute = function(name) {
      return this._attributesByName[name];
    };

    EntityDescription.prototype.attributesByName = function() {
      return this._attributesByName;
    };

    EntityDescription.prototype.getRelationship = function(name) {
      return this._relationshipsByName[name];
    };

    EntityDescription.prototype.relationshipsByName = function() {
      return this._relationshipsByName;
    };

    EntityDescription.prototype.relationshipByName = function(name) {
      return this._relationshipsByName[name];
    };

    return EntityDescription;

  })();

  module.exports = EntityDescription;

}).call(this);

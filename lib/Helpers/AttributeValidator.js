// Generated by CoffeeScript 1.9.3
(function() {
  var AttributeValidator, emailRegexp, moment, urlRegexp,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  moment = require('moment');

  urlRegexp = new RegExp('^(ht|f)tp(s?)\:\/\/(([a-zA-Z0-9\-\._]+(\.[a-zA-Z0-9\-\._]+)+)|localhost)(\/?)([a-zA-Z0-9\-\.\?\,\'\/\\\+&amp;%\$#_]*)?([\d\w\.\/\%\+\-\=\&amp;\?\:\\\&quot;\'\,\|\~\;]*)$');

  emailRegexp = new RegExp('^[0-9a-zA-Z]+([0-9a-zA-Z]*[-._+])*[0-9a-zA-Z]+@[0-9a-zA-Z]+([-.][0-9a-zA-Z]+)*([0-9a-zA-Z]*[.])[a-zA-Z]{2,6}$');

  AttributeValidator = (function(superClass) {
    extend(AttributeValidator, superClass);

    function AttributeValidator() {
      return AttributeValidator.__super__.constructor.apply(this, arguments);
    }

    AttributeValidator.validateValueForAttribute = function(value, attribute) {
      var _re, v;
      switch (attribute.type) {
        case 'string':
          if (attribute.options.maxLength && value.toString().length > attribute.options.maxLength) {
            throw new Error('value \'' + value + '\' longer than maxLength(' + attribute.options.maxLength + ') of attribute ' + attribute.name);
          }
          if (attribute.options.minLength && value.toString().length < attribute.options.minLength) {
            throw new Error('value \'' + value + '\' shorter than minLength(' + attribute.options.minLength + ') of attribute ' + attribute.name);
          }
          if (attribute.options.regexp) {
            if (!attribute.options._regexp) {
              v = attribute.options.regexp;
              _re = [];
              if (v[0] === '/') {
                v = v.substring(1);
                _re = v.split('/');
              } else {
                _re.push(v);
              }
              attribute.options._regexp = new RegExp(_re[0], _re[1]);
            }
            if (!attribute.options._regexp.test(value.toString())) {
              throw new Error('value \'' + value + '\' does is not valid for regular expression(' + attribute.options.regexp + ') of attribute ' + attribute.name);
            }
          }
          return true;
        case 'bool':
        case 'boolean':
          if (typeof value === 'string') {
            value = value.toLowerCase().trim();
          }
          switch (value) {
            case true:
            case false:
            case 'true':
            case 'false':
            case 'on':
            case 'off':
            case '1':
            case '0':
            case 'yes':
            case 'no':
              return true;
          }
          break;
        case 'date':
          if (value instanceof Date || (typeof value === 'string' && moment(new Date(value)).isValid())) {
            return true;
          }
          break;
        case 'email':
          if (emailRegexp.test(value)) {
            return true;
          }
          break;
        case 'url':
          if (urlRegexp.test(value)) {
            return true;
          }
          break;
        case 'decimal':
        case 'float':
        case 'double':
          if (!isNaN(parseFloat(value)) && isFinite(value)) {
            return true;
          }
          break;
        case 'int':
        case 'integer':
          if (!isNaN(parseInt(value)) && isFinite(value) && parseInt(value, 10) === parseFloat(value)) {
            return true;
          }
          break;
        default:
          return true;
      }
      throw new Error('value \'' + value + '\' (' + (typeof value) + ') is not valid for attribute ' + attribute.name);
    };

    return AttributeValidator;

  })(Object);

  module.exports = AttributeValidator;

}).call(this);

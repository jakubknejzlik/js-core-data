// Generated by CoffeeScript 1.9.3
(function() {
  var AttributeTransformer, moment, uuid,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  moment = require('moment');

  uuid = require('uuid');

  AttributeTransformer = (function(superClass) {
    extend(AttributeTransformer, superClass);

    function AttributeTransformer() {
      return AttributeTransformer.__super__.constructor.apply(this, arguments);
    }

    AttributeTransformer.transformedValueForAttribute = function(value, attribute) {
      if (value === null) {
        return null;
      }
      switch (attribute.type) {
        case 'date':
        case 'timestamp':
          if (typeof value === 'string') {
            value = new Date(value);
          }
          return moment(value).toDate();
        case 'bool':
        case 'boolean':
          if (typeof value === 'string') {
            value = value.toLowerCase().trim();
          }
          switch (value) {
            case true:
            case 'true':
            case 1:
            case '1':
            case 'on':
            case 'yes':
              return true;
            default:
              return false;
          }
          break;
        case 'decimal':
        case 'double':
        case 'float':
          value = parseFloat(value);
          if (isNaN(value)) {
            value = null;
          }
          return value;
        case 'int':
        case 'integer':
          value = parseInt(value, 10);
          if (isNaN(value)) {
            value = null;
          }
          return value;
      }
      return value;
    };

    AttributeTransformer.persistentValueForAttribute = function(value, attribute) {
      if (value === null) {
        return null;
      }
      switch (attribute.type) {
        case 'timestamp':
          if (typeof value === 'string') {
            value = new Date(value);
          }
          return moment(value).valueOf();
      }
      return value;
    };

    AttributeTransformer.defaultValueForAttribute = function(attribute) {
      var ref, ref1, ref2, ref3, ref4;
      switch (attribute.type) {
        case 'uuid':
          if ((ref = (ref1 = attribute.info) != null ? ref1["default"] : void 0) === 'uuid' || ref === 'uuidv4') {
            return uuid.v4();
          }
          break;
        case 'date':
          if ((ref2 = (ref3 = attribute.info) != null ? ref3["default"] : void 0) === 'now') {
            return moment();
          }
      }
      return ((ref4 = attribute.info) != null ? ref4["default"] : void 0) || null;
    };

    return AttributeTransformer;

  })(Object);

  module.exports = AttributeTransformer;

}).call(this);

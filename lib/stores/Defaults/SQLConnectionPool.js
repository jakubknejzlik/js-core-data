// Generated by CoffeeScript 1.10.0
(function() {
  var GenericPool, SQLConnectionPool, SQLTransaction, URL, querystring,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  GenericPool = require('generic-pool');

  URL = require('url');

  querystring = require('querystring');

  SQLTransaction = require('./SQLTransaction');

  SQLConnectionPool = (function() {
    function SQLConnectionPool(url, createConnectionFunction, store, settings) {
      var ref, ref1, urlOptions;
      this.store = store;
      this.query = bind(this.query, this);
      urlOptions = querystring.parse(URL.parse(url).query);
      this.pool = GenericPool.Pool({
        name: "sql-connection-pool",
        create: (function(_this) {
          return function(callback) {
            var connection;
            connection = createConnectionFunction(url);
            return connection.connect(function(err) {
              if (err) {
                return callback(err);
              }
              return callback(null, connection);
            });
          };
        })(this),
        destroy: function(connection) {
          return connection.close();
        },
        validate: function(connection) {
          return connection.valid;
        },
        max: settings.maxConnections || urlOptions.maxConnections || 1,
        idleTimeoutMillis: (ref = settings != null ? settings.idletimeoutMillis : void 0) != null ? ref : 60 * 1000,
        reapIntervalMillis: (ref1 = settings != null ? settings.reapIntervalMillis : void 0) != null ? ref1 : 5 * 1000,
        log: this.store.globals.logging || this.store.globals.poolLogging
      });
    }

    SQLConnectionPool.prototype.query = function(query, params, callback) {
      if (typeof params === 'function') {
        callback = params;
        params = null;
      }
      return this.pool.acquire((function(_this) {
        return function(err, connection) {
          if (err) {
            return typeof callback === "function" ? callback(err) : void 0;
          }
          return connection.query(query, params, function(err, results) {
            _this.pool.release(connection);
            return typeof callback === "function" ? callback(err, results) : void 0;
          });
        };
      })(this));
    };

    SQLConnectionPool.prototype.createTransaction = function(callback) {
      return this.pool.acquire((function(_this) {
        return function(err, connection) {
          if (err) {
            return callback(err);
          }
          return callback(null, new SQLTransaction(connection, _this.store));
        };
      })(this));
    };

    SQLConnectionPool.prototype.releaseTransaction = function(transaction) {
      return this.pool.release(transaction.connection);
    };

    SQLConnectionPool.prototype.closeAllConnections = function(callback) {
      return this.pool.destroyAllNow(callback);
    };

    return SQLConnectionPool;

  })();

  module.exports = SQLConnectionPool;

}).call(this);

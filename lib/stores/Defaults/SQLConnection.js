// Generated by CoffeeScript 1.10.0
(function() {
  var SQLConnection, SQLTransaction, moment;

  moment = require('moment');

  SQLTransaction = require('./SQLTransaction');

  SQLConnection = (function() {
    SQLConnection.prototype.valid = true;

    function SQLConnection(url, store) {
      this.url = url;
      this.store = store;
    }

    SQLConnection.prototype.connect = function(callback) {
      return callback(new Error('not implemented'));
    };

    SQLConnection.prototype.close = function(callback) {
      return callback(new Error('not implemented'));
    };

    SQLConnection.prototype.query = function(query, params, callback) {
      if (typeof params === 'function') {
        callback = params;
        params = void 0;
      }
      query = this.escapeQuery(query, params);
      this.log(query);
      return this.execute(query, (function(_this) {
        return function(err, results) {
          if (err) {
            _this.log('error in query:', query, ', error:', err.message);
          }
          return callback(err, results);
        };
      })(this));
    };

    SQLConnection.prototype.log = function() {
      var ref, ref1;
      if ((ref = this.store) != null ? (ref1 = ref.globals) != null ? ref1.logging : void 0 : void 0) {
        return this.store.globals.logging.apply(this.store.globals.logging, arguments);
      }
    };

    SQLConnection.prototype.execute = function(query, params, callback) {
      return callback(new Error('not implemented'));
    };

    SQLConnection.prototype.createRow = function(tableName, callback) {
      return callback(new Error('not implemented'));
    };

    SQLConnection.prototype.escapeQuery = function(query, params) {
      params = params || [];
      query = query.replace(/\?/g, (function(_this) {
        return function() {
          var value;
          value = params.shift();
          value = _this.escapeValue(value);
          return value;
        };
      })(this));
      return query;
    };

    SQLConnection.prototype.escapeValue = function(value) {
      if (typeof value === 'string') {
        return '\'' + value.replace(/'/g, '\'\'') + '\'';
      } else if (value instanceof Date) {
        return '\'' + moment(value).format('YYYY-MM-DD HH:mm:ss') + '\'';
      } else if (value === true) {
        return '1';
      } else if (value === false) {
        return '0';
      } else if (!isNaN(value)) {
        return value;
      }
      return 'NULL';
    };

    return SQLConnection;

  })();

  module.exports = SQLConnection;

}).call(this);

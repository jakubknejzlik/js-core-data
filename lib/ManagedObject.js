// Generated by CoffeeScript 1.9.3
(function() {
  var AttributeTransformer, AttributeValidator, ManagedObject, ManagedObjectID, RelationshipDescription, _, ac, capitalizedString,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ManagedObjectID = require('./ManagedObjectID');

  RelationshipDescription = require('./Descriptors/RelationshipDescription');

  AttributeValidator = require('./Helpers/AttributeValidator');

  AttributeTransformer = require('./Helpers/AttributeTransformer');

  ac = require('array-control');

  _ = require('underscore');

  _.mixin(require('underscore.inflections'));

  capitalizedString = function(string) {
    return string[0].toUpperCase() + string.substring(1);
  };

  ManagedObject = (function(superClass) {
    extend(ManagedObject, superClass);

    function ManagedObject(entity, managedObjectContext) {
      this.entity = entity;
      this.managedObjectContext = managedObjectContext;
      this._objectID = null;
      this._isInserted = false;
      this._isUpdated = false;
      this._isDeleted = false;
      this._isFault = true;
      this._data = null;
      this._changes = null;
      this._relationChanges = null;
    }

    ManagedObject.prototype.fetchData = function() {
      this._data = this.managedObjectContext.storeCoordinator.valuesForObject(this);
      return this._isFault = false;
    };

    ManagedObject.prototype.validateValueForKey = function(value, key) {
      var attributeDescription;
      attributeDescription = this.entity.attributesByName()[key];
      return AttributeValidator.validateValueForAttribute(value, attributeDescription);
    };

    ManagedObject.prototype.setValues = function(values) {
      var attributeDescription, i, len, ref, results, setterFnName;
      ref = this.entity.attributes;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        attributeDescription = ref[i];
        setterFnName = 'set' + capitalizedString(attributeDescription.name);
        if (values[attributeDescription.name] != null) {
          results.push(this[setterFnName](values[attributeDescription.name]));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    ManagedObject.prototype.getValues = function() {
      var attributeDescription, getterFnName, i, len, ref, value, values;
      if (this.isFault) {
        this.fetchData();
      }
      values = {
        id: parseInt(this.objectID.recordId())
      };
      ref = this.entity.attributes;
      for (i = 0, len = ref.length; i < len; i++) {
        attributeDescription = ref[i];
        getterFnName = 'get' + capitalizedString(attributeDescription.name);
        value = this[getterFnName]();
        if (value != null) {
          values[attributeDescription.name] = value;
        } else {
          values[attributeDescription.name] = null;
        }
      }
      return values;
    };

    ManagedObject.prototype.toJSON = function() {
      return this.getValues();
    };

    ManagedObject.addAttributeDescription = function(attributeDescription) {
      var capitalizedName;
      capitalizedName = capitalizedString(attributeDescription.name);
      this.prototype['get' + capitalizedName] = function() {
        if (this.isFault) {
          this.fetchData();
        }
        return this._data[attributeDescription.name];
      };
      this.prototype['set' + capitalizedName] = function(value) {
        if (this.isFault) {
          this.fetchData();
        }
        if (value !== this._data[attributeDescription.name]) {
          if (value) {
            this['validate' + capitalizedName](value);
          }
          value = AttributeTransformer.transformValueForAttribute(value, attributeDescription);
          this._data[attributeDescription.name] = value;
          this._changes = this._changes || {};
          this._changes[attributeDescription.name] = value;
          this._didUpdateValues();
        }
        return this;
      };
      this.prototype['validate' + capitalizedName] = function(value) {
        return this.validateValueForKey(value, attributeDescription.name);
      };
      return this.bindAttributeDescription(attributeDescription);
    };

    ManagedObject.bindAttributeDescription = function(attributeDescription) {
      var capitalizedName;
      capitalizedName = attributeDescription.name[0].toUpperCase() + attributeDescription.name.substring(1);
      return Object.defineProperty(this.prototype, attributeDescription.name, {
        get: this.prototype['get' + capitalizedName],
        set: this.prototype['set' + capitalizedName]
      });
    };

    ManagedObject.addRelationshipDescription = function(relationshipDescription) {
      var capitalizedName, capitalizedSingularizedName, inverseRelationship, inverseRelationshipCapitalizedName, singularizedName;
      singularizedName = _.singularize(relationshipDescription.name);
      capitalizedSingularizedName = singularizedName[0].toUpperCase() + singularizedName.substring(1);
      capitalizedName = relationshipDescription.name[0].toUpperCase() + relationshipDescription.name.substring(1);
      inverseRelationship = relationshipDescription.inverseRelationship();
      inverseRelationshipCapitalizedName = inverseRelationship.name[0].toUpperCase() + inverseRelationship.name.substring(1);
      if (!relationshipDescription.toMany) {
        this.prototype['get' + capitalizedName] = function(callback) {
          if (this.isFault) {
            this.fetchData();
          }
          if (this._data[relationshipDescription.name] === void 0) {
            return this.managedObjectContext._getObjectsForRelationship(relationshipDescription, this, this.managedObjectContext, (function(_this) {
              return function(err, object) {
                return callback(err, object);
              };
            })(this));
          } else {
            return callback(null, this._data[relationshipDescription.name]);
          }
        };
        this.prototype['set' + capitalizedName] = function(object) {
          return this._setObjectToRelation(object, relationshipDescription, inverseRelationship);
        };
      } else {
        this.prototype['get' + capitalizedName] = this.prototype['get' + capitalizedSingularizedName + 'Objects'] = function(callback) {
          if (this.isFault) {
            this.fetchData();
          }
          if (!this._data[relationshipDescription.name]) {
            return this.managedObjectContext._getObjectsForRelationship(relationshipDescription, this, this.managedObjectContext, (function(_this) {
              return function(err, objects) {
                var i, item, j, len, len1, ref, ref1;
                if (err) {
                  return callback(err);
                }
                if (_this._relationChanges) {
                  ref = _this._relationChanges['added_' + relationshipDescription.name] != null;
                  for (i = 0, len = ref.length; i < len; i++) {
                    item = ref[i];
                    ac.addObject(objects, item);
                  }
                  ref1 = _this._relationChanges['removed_' + relationshipDescription.name] != null;
                  for (j = 0, len1 = ref1.length; j < len1; j++) {
                    item = ref1[j];
                    ac.removeObject(objects, item);
                  }
                }
                _this._data[relationshipDescription.name] = objects;
                return callback(null, _this._data[relationshipDescription.name]);
              };
            })(this));
          } else {
            return callback(null, this._data[relationshipDescription.name]);
          }
        };
        this.prototype['add' + capitalizedSingularizedName] = function(object) {
          return this['add' + capitalizedName]([object]);
        };
        this.prototype['add' + capitalizedName] = this.prototype['add' + capitalizedSingularizedName + 'Objects'] = function(objects) {
          var i, len, object, results;
          results = [];
          for (i = 0, len = objects.length; i < len; i++) {
            object = objects[i];
            results.push(this._addObjectToRelation(object, relationshipDescription, inverseRelationship));
          }
          return results;
        };
        this.prototype['remove' + capitalizedSingularizedName] = function(object) {
          return this['remove' + capitalizedName]([object]);
        };
        this.prototype['remove' + capitalizedName] = this.prototype['remove' + capitalizedSingularizedName + 'Objects'] = function(objects) {
          var i, len, object, results;
          results = [];
          for (i = 0, len = objects.length; i < len; i++) {
            object = objects[i];
            results.push(this._removeObjectFromRelation(object, relationshipDescription, inverseRelationship));
          }
          return results;
        };
      }
      return this;
    };

    ManagedObject.prototype.prepareForDeletion = function(callback) {
      return callback();
    };

    ManagedObject.prototype._setObjectToRelation = function(object, relationshipDescription, inversedRelationshipDescription, noRecursion) {
      var prevObject;
      if (this.isFault) {
        this.fetchData();
      }
      if (object !== this._data[relationshipDescription.name]) {
        prevObject = this._data[relationshipDescription.name];
        this._data[relationshipDescription.name] = object;
        this._relationChanges = this._relationChanges || {};
        this._relationChanges[relationshipDescription.name] = object;
        if (inversedRelationshipDescription) {
          if (inversedRelationshipDescription.toMany) {
            if (object === null && prevObject) {
              prevObject._removeObjectFromRelation(this, inversedRelationshipDescription, relationshipDescription, true);
            } else if (object !== null) {
              object._addObjectToRelation(this, inversedRelationshipDescription, relationshipDescription, true);
            }
          } else if (!noRecursion) {
            object._setObjectToRelation(this, inversedRelationshipDescription, relationshipDescription, true);
          }
        }
        return this._didUpdateValues();
      }
    };

    ManagedObject.prototype._addObjectToRelation = function(object, relationshipDescription, inversedRelationshipDescription, noRecursion) {
      if (this.isFault) {
        this.fetchData();
      }
      if (!this._data[relationshipDescription.name] || indexOf.call(this._data[relationshipDescription.name], object) < 0) {
        this._relationChanges = this._relationChanges || {};
        this._relationChanges['added_' + relationshipDescription.name] = this._relationChanges['added_' + relationshipDescription.name] || [];
        this._relationChanges['removed_' + relationshipDescription.name] = this._relationChanges['removed_' + relationshipDescription.name] || [];
        this._data[relationshipDescription.name] = this._data[relationshipDescription.name] || [];
        ac.addObject(this._data[relationshipDescription.name], object);
        ac.addObject(this._relationChanges['added_' + relationshipDescription.name], object);
        if (this._relationChanges['removed_' + relationshipDescription.name]) {
          ac.removeObject(this._relationChanges['removed_' + relationshipDescription.name], object);
        }
        if (inversedRelationshipDescription && !noRecursion) {
          if (!inversedRelationshipDescription.toMany) {
            object._setObjectToRelation(this, inversedRelationshipDescription);
          } else {
            object._addObjectToRelation(this, inversedRelationshipDescription, relationshipDescription, true);
          }
        }
        return this._didUpdateValues();
      }
    };

    ManagedObject.prototype._removeObjectFromRelation = function(object, relationshipDescription, inversedRelationshipDescription, noRecursion) {
      if (this.isFault) {
        this.fetchData();
      }
      if (!this._data[relationshipDescription.name] || indexOf.call(this._data[relationshipDescription.name], object) >= 0) {
        this._relationChanges = this._relationChanges || {};
        this._relationChanges['added_' + relationshipDescription.name] = this._relationChanges['added_' + relationshipDescription.name] || [];
        this._relationChanges['removed_' + relationshipDescription.name] = this._relationChanges['removed_' + relationshipDescription.name] || [];
        if (this._data[relationshipDescription.name]) {
          ac.removeObject(this._data[relationshipDescription.name], object);
        }
        ac.addObject(this._relationChanges['removed_' + relationshipDescription.name], object);
        if (this._relationChanges['added_' + relationshipDescription.name]) {
          ac.removeObject(this._relationChanges['added_' + relationshipDescription.name], object);
        }
        if (inversedRelationshipDescription && !noRecursion) {
          if (!inversedRelationshipDescription.toMany) {
            object._setObjectToRelation(null, inversedRelationshipDescription);
          } else {
            object._removeObjectFromRelation(this, inversedRelationshipDescription, relationshipDescription, true);
          }
        }
        return this._didUpdateValues();
      }
    };

    ManagedObject.prototype._didUpdateValues = function() {
      var ref;
      this._isUpdated = true;
      if (indexOf.call((ref = this.managedObjectContext) != null ? ref.updatedObjects : void 0, this) < 0) {
        return ac.addObject(this.managedObjectContext.updatedObjects, this);
      }
    };

    Object.defineProperties(ManagedObject.prototype, {
      objectID: {
        get: function() {
          return this._objectID;
        }
      },
      hasChanges: {
        get: function() {
          return this.isUpdated || this.isInserted || this.isDeleted;
        }
      },
      isInserted: {
        get: function() {
          return this._isInserted;
        }
      },
      isUpdated: {
        get: function() {
          return this._isUpdated;
        }
      },
      isDeleted: {
        get: function() {
          return this._isDeleted;
        }
      },
      isFault: {
        get: function() {
          return this._isFault;
        }
      }
    });

    return ManagedObject;

  })(Object);

  module.exports = ManagedObject;

}).call(this);

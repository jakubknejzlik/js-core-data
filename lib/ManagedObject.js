// Generated by CoffeeScript 1.10.0
(function() {
  var ManagedObject, ManagedObjectID, Promise, RelationshipDescription, _, ac, async, capitalizedString, util,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ManagedObjectID = require('./ManagedObjectID');

  RelationshipDescription = require('./Descriptors/RelationshipDescription');

  ac = require('array-control');

  Promise = require('bluebird');

  async = require('async');

  util = require('util');

  _ = require('underscore');

  _.mixin(require('underscore.inflections'));

  capitalizedString = function(string) {
    return string[0].toUpperCase() + string.substring(1);
  };

  ManagedObject = (function(superClass) {
    extend(ManagedObject, superClass);

    function ManagedObject(entity, managedObjectContext, _rawData) {
      this.entity = entity;
      this.managedObjectContext = managedObjectContext;
      this._rawData = _rawData;
      this.context = this.managedObjectContext;
      this._objectID = null;
      this._isInserted = false;
      this._isDeleted = false;
      this._isFault = true;
      this._data = null;
      this._changes = null;
      this._relationChanges = null;
    }

    ManagedObject.prototype.fetchData = function() {
      var attribute, data, i, j, len, len1, ref, ref1, relationship;
      data = {};
      if (this._rawData) {
        ref = this.entity.attributes;
        for (i = 0, len = ref.length; i < len; i++) {
          attribute = ref[i];
          data[attribute.name] = attribute.transform(this._rawData[attribute.name]);
        }
        ref1 = this.entity.relationships;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          relationship = ref1[j];
          data[relationship.name + '_id'] = this._rawData[relationship.name + '_id'];
        }
      }
      delete this._rawData;
      this._data = data;
      return this._isFault = false;
    };

    ManagedObject.prototype.validateValueForKey = function(value, key) {
      var attributeDescription;
      attributeDescription = this.entity.attributesByName()[key];
      return attributeDescription.validateValue(value);
    };

    ManagedObject.prototype.setValues = function(values, allowedAttributes, options) {
      var attributeDescription, i, len, ref, ref1, ref2, results;
      if (values == null) {
        values = {};
      }
      if (options == null) {
        options = {};
      }
      if (!Array.isArray(allowedAttributes)) {
        options = allowedAttributes || {};
        allowedAttributes = null;
      }
      ref = this.entity.attributes;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        attributeDescription = ref[i];
        if ((values[attributeDescription.name] !== void 0) && (!allowedAttributes || (ref1 = attributeDescription.name, indexOf.call(allowedAttributes, ref1) >= 0)) && (!attributeDescription.isPrivate() || options.privates || (allowedAttributes && (ref2 = attributeDescription.name, indexOf.call(allowedAttributes, ref2) >= 0)))) {
          results.push(this[attributeDescription.name] = values[attributeDescription.name]);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    ManagedObject.prototype.getValues = function(allowedAttributes, options) {
      var attributeDescription, getterFnName, i, j, len, len1, ref, ref1, ref2, relationship, value, values;
      if (options == null) {
        options = {};
      }
      if (!Array.isArray(allowedAttributes)) {
        options = allowedAttributes || {};
        allowedAttributes = options.attributes || null;
      }
      if (this.isFault) {
        this.fetchData();
      }
      values = {
        id: this.objectID.recordId()
      };
      ref = this.entity.attributes;
      for (i = 0, len = ref.length; i < len; i++) {
        attributeDescription = ref[i];
        if ((!allowedAttributes || (ref1 = attributeDescription.name, indexOf.call(allowedAttributes, ref1) >= 0)) && (!attributeDescription.isPrivate() || options.privates)) {
          value = this[attributeDescription.name];
          if (value != null) {
            values[attributeDescription.name] = value;
          } else {
            values[attributeDescription.name] = null;
          }
        }
      }
      if (!options.noRelations) {
        ref2 = this.entity.relationships;
        for (j = 0, len1 = ref2.length; j < len1; j++) {
          relationship = ref2[j];
          if (!relationship.toMany) {
            getterFnName = 'get' + capitalizedString(_.singularize(relationship.name)) + 'ID';
            value = this[getterFnName]();
            if (value != null) {
              values[_.singularize(relationship.name) + '_id'] = value;
            } else {
              values[_.singularize(relationship.name) + '_id'] = null;
            }
          }
        }
      }
      return values;
    };

    ManagedObject.prototype.toJSON = function(options) {
      return this.getValues(options);
    };

    ManagedObject.addAttributeDescription = function(attributeDescription) {
      var capitalizedName;
      capitalizedName = capitalizedString(attributeDescription.name);
      if (!attributeDescription.isTransient()) {
        this.prototype['get' + capitalizedName] = this.prototype['get' + capitalizedName] || function() {
          return this['_get' + capitalizedName]();
        };
        this.prototype['set' + capitalizedName] = this.prototype['set' + capitalizedName] || function(value) {
          return this['_set' + capitalizedName](value);
        };
        this.prototype['_get' + capitalizedName] = function() {
          var value;
          if (this.isFault) {
            this.fetchData();
          }
          value = this._data[attributeDescription.name];
          if (value === void 0) {
            return null;
          }
          return value;
        };
        this.prototype['_set' + capitalizedName] = function(value) {
          if (this.isFault) {
            this.fetchData();
          }
          if (value !== this._data[attributeDescription.name]) {
            if (typeof this['validate' + capitalizedName] === 'function') {
              if (!this['validate' + capitalizedName](value)) {
                throw new Error('value \'' + value + '\' (' + (typeof value) + ') is not valid for attribute ' + attributeDescription.name);
              }
            }
            this['_validate' + capitalizedName](value);
            value = attributeDescription.transform(value);
            this._data[attributeDescription.name] = value;
            this._changes = this._changes || {};
            this._changes[attributeDescription.name] = value;
            this._didUpdateValues();
          }
          return this;
        };
        this.prototype['_validate' + capitalizedName] = function(value) {
          return this.validateValueForKey(value, attributeDescription.name);
        };
      }
      return this.bindAttributeDescription(attributeDescription);
    };

    ManagedObject.bindAttributeDescription = function(attributeDescription) {
      var capitalizedName;
      capitalizedName = attributeDescription.name[0].toUpperCase() + attributeDescription.name.substring(1);
      return Object.defineProperty(this.prototype, attributeDescription.name, {
        get: this.prototype['get' + capitalizedName],
        set: this.prototype['set' + capitalizedName]
      });
    };

    ManagedObject.addRelationshipDescription = function(relationshipDescription) {
      var capitalizedName, capitalizedSingularizedName, inverseRelationship, inverseRelationshipCapitalizedName, singularizedName;
      singularizedName = _.singularize(relationshipDescription.name);
      capitalizedSingularizedName = singularizedName[0].toUpperCase() + singularizedName.substring(1);
      capitalizedName = relationshipDescription.name[0].toUpperCase() + relationshipDescription.name.substring(1);
      inverseRelationship = relationshipDescription.inverseRelationship();
      inverseRelationshipCapitalizedName = inverseRelationship.name[0].toUpperCase() + inverseRelationship.name.substring(1);
      if (!relationshipDescription.toMany) {
        this.prototype['get' + capitalizedName] = this.prototype['get' + capitalizedName] || function(callback) {
          return this['_get' + capitalizedName](callback);
        };
        this.prototype['set' + capitalizedName] = this.prototype['set' + capitalizedName] || function(object) {
          return this['_set' + capitalizedName](object);
        };
        this.prototype['get' + capitalizedSingularizedName + 'ID'] = function() {
          var ref, ref1;
          if (this.isFault) {
            this.fetchData();
          }
          return this._data[singularizedName + '_id'] || ((ref = this._data[relationshipDescription.name]) != null ? (ref1 = ref.objectID) != null ? ref1.recordId() : void 0 : void 0) || null;
        };
        this.prototype['_get' + capitalizedName] = function(callback) {
          return new Promise((function(_this) {
            return function(resolve, reject) {
              if (_this.isFault) {
                _this.fetchData();
              }
              return async.nextTick(function() {
                if (_this._data[relationshipDescription.name] === void 0) {
                  return _this.managedObjectContext._getObjectsForRelationship(relationshipDescription, _this, _this.managedObjectContext, function(err, objects) {
                    if (err) {
                      return reject(err);
                    } else {
                      return resolve(objects[0] || null);
                    }
                  });
                } else {
                  return resolve(_this._data[relationshipDescription.name]);
                }
              });
            };
          })(this)).asCallback(callback);
        };
        this.prototype['_set' + capitalizedName] = function(object) {
          if (object !== null && !(object instanceof ManagedObject)) {
            throw new Error('only ManagedObject instances or null can be set to relationship (given ' + util.format(object) + '; ' + relationshipDescription.entity.name + '=>' + relationshipDescription.name + ')');
          }
          return this._setObjectToRelation(object, relationshipDescription, inverseRelationship);
        };
      } else {
        this.prototype['get' + capitalizedName] = this.prototype['get' + capitalizedName] || function(callback) {
          return this['_get' + capitalizedName](callback);
        };
        this.prototype['add' + capitalizedSingularizedName] = this.prototype['add' + capitalizedSingularizedName] || function(object) {
          return this['_add' + capitalizedSingularizedName](object);
        };
        this.prototype['add' + capitalizedName] = this.prototype['add' + capitalizedName] || function(objects) {
          return this['_add' + capitalizedName](objects);
        };
        this.prototype['remove' + capitalizedSingularizedName] = this.prototype['remove' + capitalizedSingularizedName] || function(object) {
          return this['_remove' + capitalizedSingularizedName](object);
        };
        this.prototype['remove' + capitalizedName] = this.prototype['remove' + capitalizedName] || function(objects) {
          return this['_remove' + capitalizedName](objects);
        };
        this.prototype['_get' + capitalizedName] = this.prototype['get' + capitalizedSingularizedName + 'Objects'] = function(callback) {
          return new Promise((function(_this) {
            return function(resolve, reject) {
              if (_this.isFault) {
                _this.fetchData();
              }
              if (!Array.isArray(_this._data[relationshipDescription.name])) {
                return _this.managedObjectContext._getObjectsForRelationship(relationshipDescription, _this, _this.managedObjectContext, function(err, objects) {
                  var i, item, j, len, len1, ref, ref1;
                  if (err) {
                    return reject(err);
                  }
                  if (_this._relationChanges) {
                    ref = _this._relationChanges['added_' + relationshipDescription.name] != null;
                    for (i = 0, len = ref.length; i < len; i++) {
                      item = ref[i];
                      ac.addObject(objects, item);
                    }
                    ref1 = _this._relationChanges['removed_' + relationshipDescription.name] != null;
                    for (j = 0, len1 = ref1.length; j < len1; j++) {
                      item = ref1[j];
                      ac.removeObject(objects, item);
                    }
                  }
                  _this._data[relationshipDescription.name] = objects;
                  return resolve(_this._data[relationshipDescription.name].slice(0));
                });
              } else {
                return resolve(_this._data[relationshipDescription.name].slice(0));
              }
            };
          })(this)).asCallback(callback);
        };
        this.prototype['_add' + capitalizedSingularizedName] = function(object) {
          if (!(object instanceof ManagedObject)) {
            throw new Error('only ManagedObject instances can be added to toMany relationship (given ' + util.format(object) + '; ' + relationshipDescription.entity.name + '=>' + relationshipDescription.name + ')');
          }
          return this._addObjectToRelation(object, relationshipDescription, inverseRelationship);
        };
        this.prototype['_add' + capitalizedName] = this.prototype['add' + capitalizedSingularizedName + 'Objects'] = function(objects) {
          var i, len, object, results;
          if (!Array.isArray(objects)) {
            throw new Error('array must be specified in addObjects method (given ' + util.format(objects) + '; ' + relationshipDescription.entity.name + '=>' + relationshipDescription.name + ')');
          }
          results = [];
          for (i = 0, len = objects.length; i < len; i++) {
            object = objects[i];
            results.push(this['add' + capitalizedSingularizedName](object));
          }
          return results;
        };
        this.prototype['_remove' + capitalizedSingularizedName] = function(object) {
          if (!(object instanceof ManagedObject)) {
            throw new Error('only ManagedObject instances can be removed from toMany relationship (given ' + util.format(object) + '; ' + relationshipDescription.entity.name + '=>' + relationshipDescription.name + ')');
          }
          return this._removeObjectFromRelation(object, relationshipDescription, inverseRelationship);
        };
        this.prototype['_remove' + capitalizedName] = this.prototype['remove' + capitalizedSingularizedName + 'Objects'] = function(objects) {
          var i, len, object, results;
          if (!Array.isArray(objects)) {
            throw new Error('array must be specified in removeObjects method (given ' + util.format(objects) + '; ' + relationshipDescription.entity.name + '=>' + relationshipDescription.name + ')');
          }
          results = [];
          for (i = 0, len = objects.length; i < len; i++) {
            object = objects[i];
            results.push(this['remove' + capitalizedSingularizedName](object));
          }
          return results;
        };
      }
      return this;
    };

    ManagedObject.prototype.awakeFromInsert = function() {};

    ManagedObject.prototype.awakeFromFetch = function() {};

    ManagedObject.prototype.willSave = function() {
      var attribute, i, len, ref, results;
      ref = this.entity.getNonTransientAttributes();
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        attribute = ref[i];
        if (attribute.info.required && this[attribute.name] === null) {
          throw new Error('cannot save ' + this.entity.name + ', attribute ' + attribute.name + ' is required');
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    ManagedObject.prototype.didSave = function() {};

    ManagedObject.prototype.prepareForDeletion = function(callback) {
      return callback();
    };

    ManagedObject.prototype._setObjectToRelation = function(object, relationshipDescription, inversedRelationshipDescription, noRecursion) {
      var prevObject, singularizedName;
      if (this.isFault) {
        this.fetchData();
      }
      if (object && object.managedObjectContext !== this.managedObjectContext) {
        throw new Error('cannot set object to relationship of object in different context');
      }
      if (object !== this._data[relationshipDescription.name]) {
        prevObject = this._data[relationshipDescription.name];
        singularizedName = _.singularize(relationshipDescription.name);
        this._data[relationshipDescription.name] = object;
        delete this._data[singularizedName + '_id'];
        this._relationChanges = this._relationChanges || {};
        this._relationChanges[relationshipDescription.name] = object;
        if (inversedRelationshipDescription) {
          if (inversedRelationshipDescription.toMany) {
            if (object === null && prevObject) {
              prevObject._removeObjectFromRelation(this, inversedRelationshipDescription, relationshipDescription, true);
            } else if (object !== null) {
              object._addObjectToRelation(this, inversedRelationshipDescription, relationshipDescription, true);
            }
          } else if (!noRecursion) {
            object._setObjectToRelation(this, inversedRelationshipDescription, relationshipDescription, true);
          }
        }
        return this._didUpdateValues();
      }
    };

    ManagedObject.prototype._addObjectToRelation = function(object, relationshipDescription, inversedRelationshipDescription, noRecursion) {
      if (this.isFault) {
        this.fetchData();
      }
      if (object && object.managedObjectContext !== this.managedObjectContext) {
        throw new Error('cannot add object to relationship of object in different context');
      }
      if (!this._data[relationshipDescription.name] || indexOf.call(this._data[relationshipDescription.name], object) < 0) {
        this._relationChanges = this._relationChanges || {};
        this._relationChanges['added_' + relationshipDescription.name] = this._relationChanges['added_' + relationshipDescription.name] || [];
        this._relationChanges['removed_' + relationshipDescription.name] = this._relationChanges['removed_' + relationshipDescription.name] || [];
        this._data[relationshipDescription.name] = this._data[relationshipDescription.name] || [];
        ac.addObject(this._data[relationshipDescription.name], object);
        if (indexOf.call(this._relationChanges['removed_' + relationshipDescription.name], object) < 0) {
          ac.addObject(this._relationChanges['added_' + relationshipDescription.name], object);
        }
        if (this._relationChanges['removed_' + relationshipDescription.name]) {
          ac.removeObject(this._relationChanges['removed_' + relationshipDescription.name], object);
        }
        if (inversedRelationshipDescription && !noRecursion) {
          if (!inversedRelationshipDescription.toMany) {
            object._setObjectToRelation(this, inversedRelationshipDescription);
          } else {
            object._addObjectToRelation(this, inversedRelationshipDescription, relationshipDescription, true);
          }
        }
        return this._didUpdateValues();
      }
    };

    ManagedObject.prototype._removeObjectFromRelation = function(object, relationshipDescription, inversedRelationshipDescription, noRecursion, fireEvent) {
      if (fireEvent == null) {
        fireEvent = true;
      }
      if (this.isFault) {
        this.fetchData();
      }
      if (object && object.managedObjectContext !== this.managedObjectContext) {
        throw new Error('cannot remove object from relationship of object in different context');
      }
      if (!this._data[relationshipDescription.name] || indexOf.call(this._data[relationshipDescription.name], object) >= 0) {
        this._relationChanges = this._relationChanges || {};
        this._relationChanges['added_' + relationshipDescription.name] = this._relationChanges['added_' + relationshipDescription.name] || [];
        this._relationChanges['removed_' + relationshipDescription.name] = this._relationChanges['removed_' + relationshipDescription.name] || [];
        if (this._data[relationshipDescription.name]) {
          ac.removeObject(this._data[relationshipDescription.name], object);
        }
        if (indexOf.call(this._relationChanges['added_' + relationshipDescription.name], object) < 0) {
          ac.addObject(this._relationChanges['removed_' + relationshipDescription.name], object);
        }
        if (this._relationChanges['added_' + relationshipDescription.name]) {
          ac.removeObject(this._relationChanges['added_' + relationshipDescription.name], object);
        }
        if (inversedRelationshipDescription && !noRecursion) {
          if (!inversedRelationshipDescription.toMany) {
            object._setObjectToRelation(null, inversedRelationshipDescription);
          } else {
            object._removeObjectFromRelation(this, inversedRelationshipDescription, relationshipDescription, true);
          }
        }
        if (fireEvent) {
          return this._didUpdateValues();
        }
      }
    };

    ManagedObject.prototype._didUpdateValues = function() {
      return this.managedObjectContext._didUpdateObject(this);
    };

    Object.defineProperties(ManagedObject.prototype, {
      id: {
        get: function() {
          return this._objectID.recordId();
        }
      },
      objectID: {
        get: function() {
          return this._objectID;
        }
      },
      hasChanges: {
        get: function() {
          return this.isUpdated || this.isInserted || this.isDeleted;
        }
      },
      isInserted: {
        get: function() {
          return this._isInserted;
        }
      },
      isUpdated: {
        get: function() {
          return !!((this._changes && Object.keys(this._changes).length > 0) || (this._relationChanges && this._relationChanges.length > 0));
        }
      },
      isDeleted: {
        get: function() {
          return this._isDeleted;
        }
      },
      isFault: {
        get: function() {
          return this._isFault;
        }
      }
    });

    return ManagedObject;

  })(Object);

  module.exports = ManagedObject;

}).call(this);
